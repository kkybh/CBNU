“지식 표현과 추론(Knowledge Representation and Reasoning, KRR)”은 인공지능의 핵심 영역으로, AI가 세상을 이해하고 판단하게 만드는 방법
산업 인공지능에서도 복잡한 시스템, 규칙 기반 판단, 자동 진단 등에 활용
1. 지식 표현(Knowledge Representation)이란?
지식 표현이란, 현실 세계의 정보를 컴퓨터가 이해할 수 있는 형태로 표현하는 것을 말합니다.

사람: “공장에서 온도가 너무 높으면 냉각 시스템을 가동해야 한다.”

컴퓨터:

graphql
복사
편집
IF 온도 > 80 THEN 냉각시스템 = ON
즉, 인간의 지식을 논리, 구조, 기호 등으로 포멀하게 표현하는 것이죠.

📌 지식 표현의 형태
표현 방식	특징	예시
논리 기반 (Logic-based)	수학적 엄밀함	명제논리, 술어논리
규칙 기반 (Rule-based)	조건 → 결과 형태	IF-THEN 규칙
프레임 (Frame)	객체지향적 구조화	공정, 설비 등 객체 모델링
시맨틱 네트워크 (Semantic Network)	개체들 사이의 관계 표현	“로봇은 기계이다”
온톨로지 (Ontology)	도메인 지식의 구조적 표현	공장 내 기계, 부품, 역할 등

🧩 2. 추론(Reasoning)이란?
추론이란 표현된 지식으로부터 새로운 사실을 이끌어내는 과정입니다.

예:

css
복사
편집
1. IF A → B
2. A가 참이다
⇒ 그러므로 B도 참이다.
📌 추론의 유형
추론 방식	설명	예시
연역 추론 (Deductive Reasoning)	일반적 지식 → 구체적 사실 도출	모든 기계는 점검이 필요 → A기계도 점검 필요
귀납 추론 (Inductive Reasoning)	개별 사례 → 일반화	여러 기계에서 문제가 발생 → 공통 원인 유추
역추론 (Abductive Reasoning)	결과 → 가능한 원인 추론	기계 고장 발생 → 가능한 고장 원인 찾기

🏭 3. 산업 인공지능에서의 활용 예
📌 1. 설비 진단
지식 표현: 고장 증상과 원인을 규칙으로 표현

추론: 센서 데이터로 고장 원인 추정 (역추론)

nginx
복사
편집
IF 진동 > 임계값 AND 온도 > 90 → 베어링 문제
📌 2. 스마트 팩토리 규칙 기반 제어
지식 표현: 작업 조건, 안전 조건 등

추론: 조건 만족 여부 판단하여 자동 제어

📌 3. 의사결정 지원 시스템(DSS)
지식 기반 시스템(KBS)으로 의사결정 자동화

전문가 시스템 형태로 사용되기도 함

📐 4. 전문가 시스템 (Expert Systems)
지식 표현 + 추론을 가장 잘 보여주는 시스템

지식 베이스(Knowledge Base): 전문가의 규칙 저장

추론 엔진(Inference Engine): 입력값으로부터 결과 추론

설명 시스템(Explanation Module): 왜 그런 판단을 했는지 설명

예:
제조 공정에서 “불량 원인 분석 시스템”
→ 규칙 기반으로 온도, 압력 등을 분석하여 불량 원인을 자동으로 진단

🧠 5. 지식 표현과 추론 vs 머신러닝
항목	지식 표현 & 추론	머신러닝
지식 생성	사람이 규칙 정의	데이터로부터 학습
해석 가능성	높음 (설명 가능)	낮을 수 있음 (블랙박스)
유연성	정형화 필요	비정형 데이터에 강함
예시	전문가 시스템	딥러닝, 회귀모델 등

최근에는 둘을 결합한 Neuro-Symbolic AI도 연구되고 있어요.

✅ 요약
개념	설명
지식 표현	인간의 지식을 기계가 이해할 수 있도록 구조화
추론	표현된 지식으로부터 새로운 정보를 도출
활용 분야	설비 진단, 의사결정, 스마트 팩토리 자동화 등
장점	명확한 규칙 기반 판단, 설명 가능성 높음

추론 알고리즘의 가장 기본적인 형태는 **전방향 추론(Forward Chaining)**과 **역방향 추론(Backward Chaining)
여기서는 전방향 추론 알고리즘의 간단한 Python 예제를 제공하겠습니다. 이 방식은 IF 조건 THEN 결과 형식의 규칙을 가지고, **사실(facts)**에서 시작해서 새로운 사실을 유도해내는 방식
예제: 전방향 추론 시스템 (Forward Chaining)
문제 시나리오
다음과 같은 규칙들이 있습니다:

mathematica
복사
편집
1. IF A AND B THEN C  
2. IF C THEN D  
3. IF D AND E THEN F
초기 사실: A, B, E

목표: 가능한 모든 사실을 유도해 보자
✅ 코드 예제 (Python)
python
복사
편집
# 초기 사실
facts = {"A", "B", "E"}

# 규칙 정의 (조건: 집합, 결과: 문자)
rules = [
    ({"A", "B"}, "C"),
    ({"C"}, "D"),
    ({"D", "E"}, "F")
]

# 전방향 추론 함수
def forward_chaining(facts, rules):
    inferred = set(facts)  # 이미 알고 있는 사실
    added = True

    while added:
        added = False
        for condition, result in rules:
            if condition.issubset(inferred) and result not in inferred:
                inferred.add(result)
                added = True
                print(f"추론됨: {condition} => {result}")
    
    return inferred

# 실행
final_facts = forward_chaining(facts, rules)
print("\n최종 추론 결과:", final_facts)
✅ 출력 결과
arduino
복사
편집
추론됨: {'B', 'A'} => C  
추론됨: {'C'} => D  
추론됨: {'D', 'E'} => F

최종 추론 결과: {'A', 'C', 'D', 'B', 'F', 'E'}
🔍 해설
{"A", "B"}가 존재 → C 유도

C → D 유도

D와 E가 있으므로 F 유도

결과적으로 총 6개의 사실이 도출됩니다

🧠 실전 확장 예시
이 구조를 확장하면:

설비 고장 진단

의료 진단 전문가 시스템

공장 자동화 규칙 엔진

처럼 다양한 산업 시스템에 적용할 수 있습니다.

역방향 추론(Backward Chaining) 알고리즘의 Python 예제
역방향 추론이란?
**목표(goal)**에서 시작해서, 그것을 증명할 수 있는 **조건(condition)**들을 추적하며 필요한 사실을 확보해 가는 방식입니다.

사람의 추론과 비슷합니다:
"내가 원하는 목표 F를 만족시키려면 어떤 조건이 필요한가? 그 조건은 현재 알고 있는 사실인가?"

🔧 예제 시나리오 (같은 규칙 사용)
text
복사
편집
규칙:
1. IF A AND B THEN C
2. IF C THEN D
3. IF D AND E THEN F

초기 사실:
A, B, E

목표:
F
✅ Python 코드 – 역방향 추론 (Backward Chaining)
python
복사
편집
# 초기 사실
facts = {"A", "B", "E"}

# 규칙 (조건: 집합, 결과: 문자)
rules = [
    ({"A", "B"}, "C"),
    ({"C"}, "D"),
    ({"D", "E"}, "F")
]

# 결과 -> 조건 형태로 변환 (빠른 역추적을 위해)
rule_map = {}
for condition, result in rules:
    if result not in rule_map:
        rule_map[result] = []
    rule_map[result].append(condition)

# 역방향 추론 함수
def backward_chaining(goal, facts, rule_map, visited=None):
    if visited is None:
        visited = set()
    
    if goal in facts:
        print(f"{goal}는 이미 사실임.")
        return True
    
    if goal in visited:
        return False  # 순환 방지

    visited.add(goal)

    if goal not in rule_map:
        return False  # 더 이상 추론 불가

    for condition_set in rule_map[goal]:
        print(f"{goal}를 위해 {condition_set}을(를) 확인 중...")
        if all(backward_chaining(cond, facts, rule_map, visited) for cond in condition_set):
            print(f"{goal} 추론 성공 (조건 {condition_set} 만족)")
            facts.add(goal)
            return True

    return False

# 목표 설정
goal = "F"

# 실행
print(f"목표: {goal}\n")
result = backward_chaining(goal, facts, rule_map)

print("\n최종 결과:", "성공!" if result else "실패.")
print("추론된 사실들:", facts)
✅ 실행 결과 (설명 포함)
arduino
복사
편집
목표: F

F를 위해 {'D', 'E'}을(를) 확인 중...
D를 위해 {'C'}을(를) 확인 중...
C를 위해 {'A', 'B'}을(를) 확인 중...
A는 이미 사실임.
B는 이미 사실임.
C 추론 성공 (조건 {'A', 'B'} 만족)
D 추론 성공 (조건 {'C'} 만족)
E는 이미 사실임.
F 추론 성공 (조건 {'D', 'E'} 만족)

최종 결과: 성공!
추론된 사실들: {'F', 'C', 'B', 'E', 'A', 'D'}
🧠 핵심 포인트
역방향 추론은 목표에서 거꾸로 추적하며 필요한 조건을 재귀적으로 확인합니다.

조건이 모두 충족되면 해당 결과를 사실로 추가합니다.

실제 의사결정 시스템, 의료 진단, 설비 이상 역추적 등에 적합합니다.

✅ 요약 비교
항목	전방향 추론	역방향 추론
시작점	초기 사실	목표
방향	조건 → 결과	결과 ← 조건
용도	가능한 모든 사실 도출	특정 목표 증명 여부 확인
특징	전체 탐색	목표 지향적, 효율적


